for demographics
# train a model using k-means for customer segmentation based on customer type, age, gender, and state
kmeans = KMeans(n_clusters=3, random_state=42)
print(kmeans.fit(trainset))
# predict the clusters for the testset
y_pred = kmeans.predict(testset)
print(y_pred)
# plot the clusters
plt.scatter(testset['Age'], testset['State_enc'], c=y_pred, cmap='rainbow')
plt.xlabel('Age')
plt.ylabel('State')
plt.show()

# Evaluate the model
from sklearn.metrics import silhouette_score
print(silhouette_score(testset, y_pred))

for inventory management
# Choose a Model (Random Forest Regressor)
# from sklearn.ensemble import GradientBoostingRegressor

# # Choose a Model (Gradient Boosting Regressor)
# model = GradientBoostingRegressor()

# # Train the model
# model.fit(X_train_scaled, y_train)

# # Make predictions on the test set
# y_pred = model.predict(X_test_scaled)

# # Evaluate the model
# mae = mean_absolute_error(y_test, y_pred)
# mse = mean_squared_error(y_test, y_pred)

# print(f'Mean Absolute Error (Gradient Boosting): {mae}')
# print(f'Mean Squared Error (Gradient Boosting): {mse}')



# # Use DBSCAN to find the best state to open a new branch
# from sklearn.cluster import DBSCAN
# from sklearn.preprocessing import StandardScaler
#
# # Feature scaling
# scaler = StandardScaler()
# mall_performance[['N. Revenue (formatted)']] = scaler.fit_transform(mall_performance[['N. Revenue (formatted)']])
# print(mall_performance.head())
#
# # Initialize DBSCAN with eps=0.5 and min_samples=5
# dbscan = DBSCAN(eps=0.5, min_samples=5)
#
# # Fit the model
# dbscan.fit(mall_performance[['N. Revenue (formatted)']])
# print(dbscan)
#
# # Predict the clusters
# clusters = dbscan.fit_predict(mall_performance[['N. Revenue (formatted)']])
# print(clusters)
#
# # Visualize the clusters
# plt.scatter(mall_performance['State'], mall_performance['N. Revenue (formatted)'], c=clusters, cmap='viridis')
# plt.xlabel('State')
# # 90 degree rotation
# plt.xticks(rotation=90)
# plt.ylabel('N. Revenue')
# plt.show()
#
# # Evaluate the model
# print(silhouette_score(mall_performance[['N. Revenue (formatted)']], clusters))